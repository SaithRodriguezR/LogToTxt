message MPoint2 {
  optional double x = 1;
  optional double y = 2;
}

message MPoint3 {
  optional double x = 1;
  optional double y = 2;
  optional double w = 3;
}

message MVel2 {
  optional double vx = 1;
  optional double vy = 2;
}

message MVel3 {
  optional double vx = 1;
  optional double vy = 2;
  optional double vw = 3;
}

message MTrajectory {
  optional bool enable = 1;
  repeated MPoint2 pos = 2;
}

message MRobot {
  optional bool enable		= 1;
  optional double conf		= 2;
  optional double camConf	= 3;
  optional MPoint2 pos		= 4;
  optional double w		= 5;
  optional double speed		= 6;
  optional MVel3 vel		= 7;
  optional bool ir		= 8;
}

message MTeam {
  optional uint32 nRobots	= 1;
  repeated MRobot robot		= 2;
}

message MBall {
  optional bool enable		= 1;
  optional double conf		= 2;
  optional double camConf	= 3;
  optional MPoint2 pos		= 4;
  optional uint32 camId		= 5;
}

message MBalls {
  repeated MBall allBalls	= 1;
  optional uint32 nBalls	= 2;
}

message MMergedVision {
  optional double tCapture	= 1;
  optional uint32 nFrame	= 2;
  optional double latency	= 3;
  optional MBalls ball		= 4;
  optional MTeam blue		= 5;
  optional MTeam yellow		= 6;
}

message MBallTracking {
  optional MBall ball		= 1;
  optional int32 ballIndex	= 2;
  repeated MBall ballsTracking	= 3;
  repeated double factor	= 4;
}

message MRobotTracking {
  repeated int32 robotsIds		= 1;
  repeated MRobot robotsTracking	= 2;
  repeated double factor		= 3;
}

message MWBall {
  optional MPoint2 pos			= 1;
  optional int32 camId			= 2;
  optional double speed			= 3;
  optional double alpha			= 4;
  optional MVel2 vel			= 5;
  optional MTrajectory tray		= 6;
  optional MTrajectory trayNoFilter	= 7;
  optional MTrajectory trayParabolic 	= 8;
  optional bool isFastBall		= 9;
  optional MTrajectory trayFastBall 	= 10;
  optional bool isFlying		= 11;
  optional MPoint2 landingPoint		= 12;
}

message MWorld {
  optional double tCapture	= 1;
  optional double tFrame	= 2;
  optional MWBall ball		= 3;
  optional MTeam  stoxs		= 4;
  optional MTeam  opponent	= 5;
}

message MCircle {
  optional bool enable		= 1;
  optional MPoint2 center 	= 2;
  optional double radius 	= 3;
  optional double r		= 4;
  optional double g		= 5;
  optional double b		= 6;
}

message MLine {
  optional bool enable		= 1;
  optional MPoint2 p0 		= 2;
  optional MPoint2 p1 		= 3;
  optional double r		= 4;
  optional double g		= 5;
  optional double b		= 6;
}

message MAgent {
  optional int32 id			= 1;
  optional string rol			= 2;
  optional int32 rolState		= 3;
  repeated string rolParamName		= 4;
  repeated string rolParam		= 5;
  optional string skill			= 6;
  repeated string skillParamName	= 7;
  repeated string skillParam		= 8;
  repeated MCircle circles		= 9;
  repeated MLine lines 			= 10;
}

message MAgentsInfo {
  optional string play			= 1;
  optional int32 playState		= 2;
  optional string subplay		= 3;
  optional int32 subplayState		= 4;
  optional string zone			= 5;
  optional bool isStoxsLastTouch        = 6;
  optional bool isBallGoingOut          = 7;
  repeated string playParamName		= 8;
  repeated string playParam		= 9;
  repeated string subplayParamName	= 10;
  repeated string subplayParam		= 11;
  repeated MAgent agent			= 12;
  repeated MCircle circles		= 13;
  repeated MLine lines 			= 14;
}

message MPathPlanning {
  repeated MTrajectory robot		= 1;
}

message MCmdRobot {
  optional bool enable			= 1;
  optional double vx			= 2;
  optional double vy			= 3;
  optional double vw			= 4;
  optional int32 dribbler		= 5;
  optional bool kickerMode		= 6;
  optional double kicker		= 7;
  optional bool autoKicker		= 8;
}

message MStatus {
  repeated bool ir			= 1;
}

message MCommands {
  repeated MCmdRobot robot		= 1;
}

message MMotorRobot {
  optional bool enable			= 1;
  optional double m1			= 2;
  optional double m2			= 3;
  optional double m3			= 4;
  optional double m4			= 5;
  optional int32 dribbler		= 6;
  optional bool kickerMode		= 7;
  optional double kicker		= 8;
  optional bool autoKicker		= 9;
}

message MMotorCommands {
  repeated MMotorRobot robot		= 1;
}

